{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { createContext, useState } from \"react\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport var NameContext = createContext();\nexport default function Name(_ref) {\n  var children = _ref.children;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      name = _useState2[0],\n      setName = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isModalVisible = _useState4[0],\n      setModalVisible = _useState4[1];\n\n  var toggleModal = function toggleModal() {\n    setModalVisible(!isModalVisible);\n  };\n\n  return _jsx(NameContext.Provider, {\n    value: {\n      name: name,\n      isModalVisible: isModalVisible,\n      setName: setName,\n      toggleModal: toggleModal,\n      setModalVisible: setModalVisible\n    },\n    children: children\n  });\n}","map":{"version":3,"sources":["/home/placido/Área de Trabalho/projects/tcc/APP/src/context/NameContext.js"],"names":["React","createContext","useState","NameContext","Name","children","name","setName","isModalVisible","setModalVisible","toggleModal"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,QAA+C,OAA/C;;AAEA,OAAO,IAAMC,WAAW,GAAGF,aAAa,EAAjC;AAEP,eAAe,SAASG,IAAT,OAA4B;AAAA,MAAZC,QAAY,QAAZA,QAAY;;AACvC,kBAAwBH,QAAQ,CAAC,EAAD,CAAhC;AAAA;AAAA,MAAOI,IAAP;AAAA,MAAaC,OAAb;;AACA,mBAA0CL,QAAQ,CAAC,KAAD,CAAlD;AAAA;AAAA,MAAOM,cAAP;AAAA,MAAuBC,eAAvB;;AAEA,MAAMC,WAAW,GAAG,SAAdA,WAAc,GAAM;AACtBD,IAAAA,eAAe,CAAC,CAACD,cAAF,CAAf;AACH,GAFD;;AAIA,SACI,KAAE,WAAF,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE;AAAEF,MAAAA,IAAI,EAAJA,IAAF;AAAQE,MAAAA,cAAc,EAAdA,cAAR;AAAwBD,MAAAA,OAAO,EAAPA,OAAxB;AAAiCG,MAAAA,WAAW,EAAXA,WAAjC;AAA6CD,MAAAA,eAAe,EAAfA;AAA7C,KAA9B;AAAA,cACKJ;AADL,IADJ;AAKH","sourcesContent":["import React, { createContext, useState } from \"react\";\n\nexport const NameContext = createContext()\n\nexport default function Name({ children }) {\n    const [name, setName] = useState('')\n    const [isModalVisible, setModalVisible] = useState(false)\n\n    const toggleModal = () => {\n        setModalVisible(!isModalVisible);\n    };\n\n    return (\n        < NameContext.Provider value={{ name, isModalVisible, setName, toggleModal,setModalVisible }}>\n            {children}\n        </ NameContext.Provider>\n    )\n}"]},"metadata":{},"sourceType":"module"}