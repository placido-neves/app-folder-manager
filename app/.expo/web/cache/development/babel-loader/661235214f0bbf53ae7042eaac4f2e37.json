{"ast":null,"code":"import React, { useContext, useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { useNavigation } from '@react-navigation/native';\nimport { Modalize } from 'react-native-modalize';\nimport { PathContext } from \"../../context/PathContext\";\nimport { NameContext } from \"../../context/NameContext\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function FolderDrop(_ref) {\n  var mod = _ref.mod,\n      folder = _ref.folder,\n      path = _ref.path;\n  var navigation = useNavigation();\n\n  var _useContext = useContext(PathContext),\n      setPath = _useContext.setPath,\n      setMoveORCopy = _useContext.setMoveORCopy;\n\n  var _useContext2 = useContext(NameContext),\n      setName = _useContext2.setName,\n      toggleModal = _useContext2.toggleModal;\n\n  return _jsxs(Modalize, {\n    ref: mod,\n    snapPoint: 400,\n    modalHeight: 400,\n    children: [_jsx(TouchableOpacity, {\n      style: styles.container,\n      onPress: function onPress() {\n        navigation.navigate('Copy', {\n          path: path,\n          folder: folder\n        });\n        setMoveORCopy('copy');\n        setPath(path + '/' + folder);\n      },\n      children: _jsx(Text, {\n        style: styles.txtModal,\n        children: \"Copy\"\n      })\n    }), _jsx(TouchableOpacity, {\n      style: styles.container,\n      onPress: function onPress() {\n        navigation.navigate('Copy', {\n          path: path,\n          folder: folder\n        });\n        setMoveORCopy('move');\n        setPath(path + '/' + folder);\n      },\n      children: _jsx(Text, {\n        style: styles.txtModal,\n        children: \"Move\"\n      })\n    }), _jsx(TouchableOpacity, {\n      style: styles.container,\n      onPress: function onPress() {\n        navigation.navigate('Details', {\n          path: path,\n          folder: folder,\n          fileORFolder: 'folder'\n        });\n      },\n      children: _jsx(Text, {\n        style: styles.txtModal,\n        children: \"Details\"\n      })\n    }), _jsx(TouchableOpacity, {\n      style: styles.container,\n      onPress: function onPress() {\n        toggleModal();\n        setName(folder);\n      },\n      children: _jsx(Text, {\n        style: styles.txtModal,\n        children: \"Rename\"\n      })\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    alignItems: \"center\"\n  },\n  txtModal: {\n    padding: 10,\n    fontSize: 18,\n    fontWeight: 'bold'\n  }\n});","map":{"version":3,"sources":["/home/placido/√Årea de Trabalho/projects/tcc/APP/src/Components/FolderDrop/index.js"],"names":["React","useContext","useState","useNavigation","Modalize","PathContext","NameContext","FolderDrop","mod","folder","path","navigation","setPath","setMoveORCopy","setName","toggleModal","styles","container","navigate","txtModal","fileORFolder","StyleSheet","create","alignItems","padding","fontSize","fontWeight"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from \"react\";\nimport { StyleSheet, TouchableOpacity, Text, View, Button } from 'react-native'\nimport { useNavigation } from '@react-navigation/native';\nimport { Modalize } from 'react-native-modalize'\n\nimport { PathContext } from \"../../context/PathContext\";\nimport { NameContext } from \"../../context/NameContext\";\n\n\nexport default function FolderDrop({ mod, folder, path }) {\n    \n    const navigation = useNavigation()\n    const { setPath, setMoveORCopy } = useContext(PathContext)\n    const { setName, toggleModal } = useContext(NameContext)\n\n    return (\n        <Modalize ref={mod}  snapPoint={400} modalHeight={400}>\n            <TouchableOpacity style={styles.container} onPress={() => {\n                navigation.navigate('Copy', {\n                    path: path,\n                    folder: folder,\n                })\n                setMoveORCopy('copy')\n                setPath(path + '/' + folder)\n            }}>\n                <Text style={styles.txtModal}>Copy</Text>\n            </TouchableOpacity>\n            <TouchableOpacity style={styles.container} onPress={() => {\n                navigation.navigate('Copy', {\n                    path: path,\n                    folder: folder\n                })\n                setMoveORCopy('move')\n                setPath(path + '/' + folder)\n            }}>\n                <Text style={styles.txtModal}>Move</Text>\n            </TouchableOpacity>\n            <TouchableOpacity style={styles.container} onPress={() => {\n                navigation.navigate('Details', {\n                    path: path,\n                    folder: folder,\n                    fileORFolder: 'folder'\n                })\n            }}>\n                <Text style={styles.txtModal}>Details</Text>\n            </TouchableOpacity>\n            <TouchableOpacity style={styles.container} onPress={() => {\n                toggleModal()\n                setName(folder)\n            }}>\n                <Text style={styles.txtModal}>Rename</Text>\n            </TouchableOpacity>\n        </Modalize >\n    )\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        alignItems: \"center\",\n    },\n    txtModal: {\n        padding: 10,\n        fontSize: 18,\n        fontWeight: 'bold'\n    }\n})"]},"metadata":{},"sourceType":"module"}